/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AvatarService } from "../avatar.service";
import { AvatarCreateInput } from "./AvatarCreateInput";
import { AvatarWhereInput } from "./AvatarWhereInput";
import { AvatarWhereUniqueInput } from "./AvatarWhereUniqueInput";
import { AvatarFindManyArgs } from "./AvatarFindManyArgs";
import { AvatarUpdateInput } from "./AvatarUpdateInput";
import { Avatar } from "./Avatar";
import { Post } from "../../post/base/Post";

export class AvatarGrpcControllerBase {
  constructor(protected readonly service: AvatarService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Avatar })
  @GrpcMethod("AvatarService", "createAvatar")
  async createAvatar(@common.Body() data: AvatarCreateInput): Promise<Avatar> {
    return await this.service.createAvatar({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Avatar] })
  @ApiNestedQuery(AvatarFindManyArgs)
  @GrpcMethod("AvatarService", "avatars")
  async avatars(@common.Req() request: Request): Promise<Avatar[]> {
    const args = plainToClass(AvatarFindManyArgs, request.query);
    return this.service.avatars({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Avatar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AvatarService", "avatar")
  async avatar(
    @common.Param() params: AvatarWhereUniqueInput
  ): Promise<Avatar | null> {
    const result = await this.service.avatar({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Avatar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AvatarService", "updateAvatar")
  async updateAvatar(
    @common.Param() params: AvatarWhereUniqueInput,
    @common.Body() data: AvatarUpdateInput
  ): Promise<Avatar | null> {
    try {
      return await this.service.updateAvatar({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Avatar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AvatarService", "deleteAvatar")
  async deleteAvatar(
    @common.Param() params: AvatarWhereUniqueInput
  ): Promise<Avatar | null> {
    try {
      return await this.service.deleteAvatar({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
