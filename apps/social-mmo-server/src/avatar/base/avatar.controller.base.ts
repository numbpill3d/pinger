/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AvatarService } from "../avatar.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AvatarCreateInput } from "./AvatarCreateInput";
import { Avatar } from "./Avatar";
import { Post } from "../../post/base/Post";
import { AvatarFindManyArgs } from "./AvatarFindManyArgs";
import { AvatarWhereUniqueInput } from "./AvatarWhereUniqueInput";
import { AvatarUpdateInput } from "./AvatarUpdateInput";
import { ClothingItemFindManyArgs } from "../../clothingItem/base/ClothingItemFindManyArgs";
import { ClothingItem } from "../../clothingItem/base/ClothingItem";
import { ClothingItemWhereUniqueInput } from "../../clothingItem/base/ClothingItemWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AvatarControllerBase {
  constructor(
    protected readonly service: AvatarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Avatar })
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AvatarCreateInput,
  })
  async createAvatar(@common.Body() data: AvatarCreateInput): Promise<Avatar> {
    return await this.service.createAvatar({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        avatarUrl: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Avatar] })
  @ApiNestedQuery(AvatarFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async avatars(@common.Req() request: Request): Promise<Avatar[]> {
    const args = plainToClass(AvatarFindManyArgs, request.query);
    return this.service.avatars({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        avatarUrl: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Avatar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async avatar(
    @common.Param() params: AvatarWhereUniqueInput
  ): Promise<Avatar | null> {
    const result = await this.service.avatar({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        avatarUrl: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Avatar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AvatarUpdateInput,
  })
  async updateAvatar(
    @common.Param() params: AvatarWhereUniqueInput,
    @common.Body() data: AvatarUpdateInput
  ): Promise<Avatar | null> {
    try {
      return await this.service.updateAvatar({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          avatarUrl: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Avatar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAvatar(
    @common.Param() params: AvatarWhereUniqueInput
  ): Promise<Avatar | null> {
    try {
      return await this.service.deleteAvatar({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          avatarUrl: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/clothingItems")
  @ApiNestedQuery(ClothingItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClothingItem",
    action: "read",
    possession: "any",
  })
  async findClothingItems(
    @common.Req() request: Request,
    @common.Param() params: AvatarWhereUniqueInput
  ): Promise<ClothingItem[]> {
    const query = plainToClass(ClothingItemFindManyArgs, request.query);
    const results = await this.service.findClothingItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        rarity: true,

        avatar: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/clothingItems")
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "update",
    possession: "any",
  })
  async connectClothingItems(
    @common.Param() params: AvatarWhereUniqueInput,
    @common.Body() body: ClothingItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clothingItems: {
        connect: body,
      },
    };
    await this.service.updateAvatar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clothingItems")
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "update",
    possession: "any",
  })
  async updateClothingItems(
    @common.Param() params: AvatarWhereUniqueInput,
    @common.Body() body: ClothingItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clothingItems: {
        set: body,
      },
    };
    await this.service.updateAvatar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clothingItems")
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "update",
    possession: "any",
  })
  async disconnectClothingItems(
    @common.Param() params: AvatarWhereUniqueInput,
    @common.Body() body: ClothingItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clothingItems: {
        disconnect: body,
      },
    };
    await this.service.updateAvatar({
      where: params,
      data,
      select: { id: true },
    });
  }
}
