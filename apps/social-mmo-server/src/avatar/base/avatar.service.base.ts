/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Avatar as PrismaAvatar,
  ClothingItem as PrismaClothingItem,
  User as PrismaUser,
} from "@prisma/client";

export class AvatarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AvatarCountArgs, "select">): Promise<number> {
    return this.prisma.avatar.count(args);
  }

  async avatars(args: Prisma.AvatarFindManyArgs): Promise<PrismaAvatar[]> {
    return this.prisma.avatar.findMany(args);
  }
  async avatar(
    args: Prisma.AvatarFindUniqueArgs
  ): Promise<PrismaAvatar | null> {
    return this.prisma.avatar.findUnique(args);
  }
  async createAvatar(args: Prisma.AvatarCreateArgs): Promise<PrismaAvatar> {
    return this.prisma.avatar.create(args);
  }
  async updateAvatar(args: Prisma.AvatarUpdateArgs): Promise<PrismaAvatar> {
    return this.prisma.avatar.update(args);
  }
  async deleteAvatar(args: Prisma.AvatarDeleteArgs): Promise<PrismaAvatar> {
    return this.prisma.avatar.delete(args);
  }

  async findClothingItems(
    parentId: string,
    args: Prisma.ClothingItemFindManyArgs
  ): Promise<PrismaClothingItem[]> {
    return this.prisma.avatar
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .clothingItems(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.avatar
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
