/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClothingItem } from "./ClothingItem";
import { ClothingItemCountArgs } from "./ClothingItemCountArgs";
import { ClothingItemFindManyArgs } from "./ClothingItemFindManyArgs";
import { ClothingItemFindUniqueArgs } from "./ClothingItemFindUniqueArgs";
import { CreateClothingItemArgs } from "./CreateClothingItemArgs";
import { UpdateClothingItemArgs } from "./UpdateClothingItemArgs";
import { DeleteClothingItemArgs } from "./DeleteClothingItemArgs";
import { Avatar } from "../../avatar/base/Avatar";
import { ClothingItemService } from "../clothingItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClothingItem)
export class ClothingItemResolverBase {
  constructor(
    protected readonly service: ClothingItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClothingItem",
    action: "read",
    possession: "any",
  })
  async _clothingItemsMeta(
    @graphql.Args() args: ClothingItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClothingItem])
  @nestAccessControl.UseRoles({
    resource: "ClothingItem",
    action: "read",
    possession: "any",
  })
  async clothingItems(
    @graphql.Args() args: ClothingItemFindManyArgs
  ): Promise<ClothingItem[]> {
    return this.service.clothingItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClothingItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClothingItem",
    action: "read",
    possession: "own",
  })
  async clothingItem(
    @graphql.Args() args: ClothingItemFindUniqueArgs
  ): Promise<ClothingItem | null> {
    const result = await this.service.clothingItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClothingItem)
  @nestAccessControl.UseRoles({
    resource: "ClothingItem",
    action: "create",
    possession: "any",
  })
  async createClothingItem(
    @graphql.Args() args: CreateClothingItemArgs
  ): Promise<ClothingItem> {
    return await this.service.createClothingItem({
      ...args,
      data: {
        ...args.data,

        avatar: args.data.avatar
          ? {
              connect: args.data.avatar,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClothingItem)
  @nestAccessControl.UseRoles({
    resource: "ClothingItem",
    action: "update",
    possession: "any",
  })
  async updateClothingItem(
    @graphql.Args() args: UpdateClothingItemArgs
  ): Promise<ClothingItem | null> {
    try {
      return await this.service.updateClothingItem({
        ...args,
        data: {
          ...args.data,

          avatar: args.data.avatar
            ? {
                connect: args.data.avatar,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClothingItem)
  @nestAccessControl.UseRoles({
    resource: "ClothingItem",
    action: "delete",
    possession: "any",
  })
  async deleteClothingItem(
    @graphql.Args() args: DeleteClothingItemArgs
  ): Promise<ClothingItem | null> {
    try {
      return await this.service.deleteClothingItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Avatar, {
    nullable: true,
    name: "avatar",
  })
  @nestAccessControl.UseRoles({
    resource: "Avatar",
    action: "read",
    possession: "any",
  })
  async getAvatar(
    @graphql.Parent() parent: ClothingItem
  ): Promise<Avatar | null> {
    const result = await this.service.getAvatar(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
