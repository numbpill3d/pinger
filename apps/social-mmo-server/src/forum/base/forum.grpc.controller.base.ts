/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ForumService } from "../forum.service";
import { ForumCreateInput } from "./ForumCreateInput";
import { ForumWhereInput } from "./ForumWhereInput";
import { ForumWhereUniqueInput } from "./ForumWhereUniqueInput";
import { ForumFindManyArgs } from "./ForumFindManyArgs";
import { ForumUpdateInput } from "./ForumUpdateInput";
import { Forum } from "./Forum";
import { Post } from "../../post/base/Post";
import { ThreadFindManyArgs } from "../../thread/base/ThreadFindManyArgs";
import { Thread } from "../../thread/base/Thread";
import { ThreadWhereUniqueInput } from "../../thread/base/ThreadWhereUniqueInput";

export class ForumGrpcControllerBase {
  constructor(protected readonly service: ForumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Forum })
  @GrpcMethod("ForumService", "createForum")
  async createForum(@common.Body() data: ForumCreateInput): Promise<Forum> {
    return await this.service.createForum({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        owner: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Forum] })
  @ApiNestedQuery(ForumFindManyArgs)
  @GrpcMethod("ForumService", "forums")
  async forums(@common.Req() request: Request): Promise<Forum[]> {
    const args = plainToClass(ForumFindManyArgs, request.query);
    return this.service.forums({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        owner: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Forum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ForumService", "forum")
  async forum(
    @common.Param() params: ForumWhereUniqueInput
  ): Promise<Forum | null> {
    const result = await this.service.forum({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        owner: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Forum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ForumService", "updateForum")
  async updateForum(
    @common.Param() params: ForumWhereUniqueInput,
    @common.Body() data: ForumUpdateInput
  ): Promise<Forum | null> {
    try {
      return await this.service.updateForum({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Forum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ForumService", "deleteForum")
  async deleteForum(
    @common.Param() params: ForumWhereUniqueInput
  ): Promise<Forum | null> {
    try {
      return await this.service.deleteForum({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/threads")
  @ApiNestedQuery(ThreadFindManyArgs)
  @GrpcMethod("ForumService", "findManyThreads")
  async findManyThreads(
    @common.Req() request: Request,
    @common.Param() params: ForumWhereUniqueInput
  ): Promise<Thread[]> {
    const query = plainToClass(ThreadFindManyArgs, request.query);
    const results = await this.service.findThreads(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        title: true,

        forum: {
          select: {
            id: true,
          },
        },

        creator: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/threads")
  @GrpcMethod("ForumService", "connectThreads")
  async connectThreads(
    @common.Param() params: ForumWhereUniqueInput,
    @common.Body() body: ThreadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threads: {
        connect: body,
      },
    };
    await this.service.updateForum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/threads")
  @GrpcMethod("ForumService", "updateThreads")
  async updateThreads(
    @common.Param() params: ForumWhereUniqueInput,
    @common.Body() body: ThreadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threads: {
        set: body,
      },
    };
    await this.service.updateForum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/threads")
  @GrpcMethod("ForumService", "disconnectThreads")
  async disconnectThreads(
    @common.Param() params: ForumWhereUniqueInput,
    @common.Body() body: ThreadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threads: {
        disconnect: body,
      },
    };
    await this.service.updateForum({
      where: params,
      data,
      select: { id: true },
    });
  }
}
