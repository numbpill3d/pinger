/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Reputation as PrismaReputation,
  User as PrismaUser,
} from "@prisma/client";

export class ReputationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReputationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reputation.count(args);
  }

  async reputations(
    args: Prisma.ReputationFindManyArgs
  ): Promise<PrismaReputation[]> {
    return this.prisma.reputation.findMany(args);
  }
  async reputation(
    args: Prisma.ReputationFindUniqueArgs
  ): Promise<PrismaReputation | null> {
    return this.prisma.reputation.findUnique(args);
  }
  async createReputation(
    args: Prisma.ReputationCreateArgs
  ): Promise<PrismaReputation> {
    return this.prisma.reputation.create(args);
  }
  async updateReputation(
    args: Prisma.ReputationUpdateArgs
  ): Promise<PrismaReputation> {
    return this.prisma.reputation.update(args);
  }
  async deleteReputation(
    args: Prisma.ReputationDeleteArgs
  ): Promise<PrismaReputation> {
    return this.prisma.reputation.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.reputation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
